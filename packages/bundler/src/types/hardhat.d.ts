/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAccount__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "SimpleAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccount__factory>;
    getContractFactory(
      name: "SimpleAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccountFactory__factory>;
    getContractFactory(
      name: "SampleRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRecipient__factory>;
    getContractFactory(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonFactory__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "GetCodeHashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GetCodeHashes__factory>;
    getContractFactory(
      name: "GetUserOpHashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GetUserOpHashes__factory>;
    getContractFactory(
      name: "TestCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCoin__factory>;
    getContractFactory(
      name: "TestOpcodesAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOpcodesAccount__factory>;
    getContractFactory(
      name: "TestOpcodesAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOpcodesAccountFactory__factory>;
    getContractFactory(
      name: "TestRecursionAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRecursionAccount__factory>;
    getContractFactory(
      name: "TestRuleAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRuleAccount__factory>;
    getContractFactory(
      name: "TestRuleAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRuleAccountFactory__factory>;
    getContractFactory(
      name: "Dummy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dummy__factory>;
    getContractFactory(
      name: "TestRulesAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRulesAccount__factory>;
    getContractFactory(
      name: "TestRulesAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRulesAccountFactory__factory>;
    getContractFactory(
      name: "TestStorageAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStorageAccount__factory>;
    getContractFactory(
      name: "TestStorageAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStorageAccountFactory__factory>;
    getContractFactory(
      name: "TracerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TracerTest__factory>;

    getContractAt(
      name: "BaseAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAccount>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "SimpleAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccount>;
    getContractAt(
      name: "SimpleAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccountFactory>;
    getContractAt(
      name: "SampleRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRecipient>;
    getContractAt(
      name: "SingletonFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonFactory>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "GetCodeHashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GetCodeHashes>;
    getContractAt(
      name: "GetUserOpHashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GetUserOpHashes>;
    getContractAt(
      name: "TestCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCoin>;
    getContractAt(
      name: "TestOpcodesAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOpcodesAccount>;
    getContractAt(
      name: "TestOpcodesAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOpcodesAccountFactory>;
    getContractAt(
      name: "TestRecursionAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRecursionAccount>;
    getContractAt(
      name: "TestRuleAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRuleAccount>;
    getContractAt(
      name: "TestRuleAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRuleAccountFactory>;
    getContractAt(
      name: "Dummy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Dummy>;
    getContractAt(
      name: "TestRulesAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRulesAccount>;
    getContractAt(
      name: "TestRulesAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRulesAccountFactory>;
    getContractAt(
      name: "TestStorageAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestStorageAccount>;
    getContractAt(
      name: "TestStorageAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestStorageAccountFactory>;
    getContractAt(
      name: "TracerTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TracerTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
